oostenveld_128 <- c(oostenveld_128, "placeholder")
oostenveld_128 <- c(oostenveld_128, "placeholder")
hold <- tibble(oostenveld_channels$channel_uppercase[!not_found_oostenv],
channel_names128)
hold <- tibble(oostenveld_128,
channel_names128)
oostenveld_128 <- c(oostenveld_128, "placeholder")
hold <- tibble(oostenveld_128,
channel_names128)
View(hold)
sort(oostenveld_128)
oostenveld_128 <- sort(oostenveld_128)
hold <- tibble(oostenveld_128,
sort(channel_names128))
View(hold)
oostenveld_128 <- oostenveld_channels$channel_uppercase[!not_found_oostenv]
oostenveld_128 <- c(oostenveld_128, "zplaceholder")
oostenveld_128 <- c(oostenveld_128, "zplaceholder")
oostenveld_128 <- c(oostenveld_128, "zplaceholder")
oostenveld_128 <- sort(oostenveld_128)
hold <- tibble(oostenveld_128,
sort(channel_names128))
View(hold)
library(tidyverse)
library(plotly)
library(EMEGShelper)
## load data
oostenveld_link <- 'https://robertoostenveld.nl/electrodes/plotting_1005.txt'
oostenveld_channels <- read_table(file = oostenveld_link,
col_names = F) %>%
suppressWarnings()
oostenveld_channels <- oostenveld_channels[,1:4]
names(oostenveld_channels) <- c("channel",
"Y",
"X",
"Z")
oostenveld_channels <- tibble(oostenveld_channels)
oostenveld_coordinates_plot <- plot_ly() %>%
add_trace(data = oostenveld_channels,
type = "scatter3d",
x = ~-X,
y = ~Y,
z = ~Z,
text = ~channel,
marker = list(color = "black",
opacity = 1,
size = 2))
biosemi_temp_coordinates_plot <- plot_ly() %>%
add_trace(data = biosemi_64_from_website,
type = "scatter3d",
x = ~X,
y = ~Y,
z = ~Z,
text = ~channel,
marker = list(color = "black",
opacity = 1,
size = 2))
load("data/biosemi64_channel_numbers_names.RData")
biosemi_64_coors <- read.csv("/home/andrewf/Documents/misc/work/cart_coordinates_biosemi_calc_64_temp.csv")
biosemi_64_coors$X <- - biosemi_64_coors$X
biosemi64_channel_numbers_names[biosemi64_channel_numbers_names$channel_name == "PO5",2:3] <- "PO7"
hold <- tibble(biosemi_64_coors$channel, biosemi64_channel_numbers_names$channel_name_uppercase[1:64])
biosemi64_channel_numbers_names_2 <- biosemi64_channel_numbers_names %>%
slice(1:64) %>%
mutate("original_X"     = biosemi_64_coors$X,
"original_Y"     = biosemi_64_coors$Y,
"original_Z"     = biosemi_64_coors$Z,
"original_theta" = biosemi_64_coors$theta,
"original_phi"   = biosemi_64_coors$phi,
"orig_theta_deg" = rad2deg(original_theta),
"orig_phi_deg"   = rad2deg(original_phi),
"calc_X"         = -(sin(original_theta) * cos(original_phi)),
"calc_Y"         = sin(original_theta) * sin(original_phi),
"calc_Z"         = cos(original_theta))
original_plot <- plot_ly() %>%
add_trace(data = biosemi64_channel_numbers_names_2,
type = "scatter3d",
x = ~-original_X,# minus because I can't flip xaxis on plot
y = ~original_Y,
z = ~original_Z,
text = ~channel_name,
marker = list(color = "black",
opacity = 1,
size = 2))
calc_plot <- plot_ly() %>%
add_trace(data = biosemi64_channel_numbers_names_2,
type = "scatter3d",
x = ~-calc_X,# minus because I can't flip xaxis on plot
y = ~calc_Y,
z = ~calc_Z,
text = ~channel_name,
marker = list(color = "black",
opacity = 1,
size = 2))
original_plot
calc_plot
oostenveld_coordinates_plot
oostenveld_channels$channel_uppercase <- oostenveld_channels$channel %>% toupper()
channel_names64 <- biosemi64_channel_numbers_names_2$channel_name_uppercase
channel_names64
oostenveld_filter_64 <- oostenveld_channels %>%
filter(channel_uppercase %in% channel_names64)
oosten64_plot <- plot_ly() %>%
add_trace(data = oostenveld_filter_64,
type = "scatter3d",
x = ~-X,# minus because I can't flip xaxis on plot
y = ~Y,
z = ~Z,
text = ~channel,
marker = list(color = "black",
opacity = 1,
size = 2))
oosten64_plot
channels_128 <- read.csv("/home/andrewf/Documents/misc/work/channel_names_128.csv",
header = F)
names(channels_128) <- c("actiview",
"wired",
"channel_name")
channels_128$channel_name_uppercase <- channels_128$channel_name %>% toupper()
channel_names128 <- channels_128$channel_name_uppercase
oostenveld_filter_128 <- oostenveld_channels %>%
filter(channel_uppercase %in% channel_names128)
not_found_oostenv <- !(oostenveld_channels$channel_uppercase %in% channel_names128)
not_found_128 <- !(channel_names128 %in% oostenveld_channels$channel_uppercase)
oostenveld_128 <- oostenveld_channels$channel_uppercase[!not_found_oostenv]
channel_names128[not_found_128]
oostenveld_128 <- c(oostenveld_128, "zplaceholder")
oostenveld_128 <- c(oostenveld_128, "zplaceholder")
oostenveld_128 <- c(oostenveld_128, "zplaceholder")
oostenveld_128 <- sort(oostenveld_128)
hold <- tibble(oostenveld_128,
sort(channel_names128))
View(hold)
oostenveld_128
not_found_128
channel_names128[not_found_128]
View(oostenveld_channels)
hold
glimpse(hold)
oostenveld_128
sort(channel_names128)
hold <- tibble(oostenveld_128,
sort(channel_names128))
source("~/Documents/temp_files_to_delete/messing with channels.R", echo=TRUE)
old
hold
hold <- tibble(oostenveld_128,
sort(channel_names128))
View(hold)
channels_128 <- read.csv("/home/andrewf/Documents/misc/work/channel_names_128.csv",
header = F)
names(channels_128) <- c("actiview",
"wired",
"channel_name")
channels_128$channel_name_uppercase <- channels_128$channel_name %>% toupper()
channel_names128 <- channels_128$channel_name_uppercase
oostenveld_filter_128 <- oostenveld_channels %>%
filter(channel_uppercase %in% channel_names128)
channels_128 <- read.csv("/home/andrewf/Documents/misc/work/channel_names_128.csv",
header = F)
names(channels_128) <- c("actiview",
"wired",
"channel_name")
channels_128$channel_name_uppercase <- channels_128$channel_name %>% toupper()
channel_names128 <- channels_128$channel_name_uppercase
oostenveld_filter_128 <- oostenveld_channels %>%
filter(channel_uppercase %in% channel_names128)
oostenveld_channels$channel_uppercase <- oostenveld_channels$channel %>% toupper()
channel_names64 <- biosemi64_channel_numbers_names_2$channel_name_uppercase
channel_names64
oostenveld_filter_64 <- oostenveld_channels %>%
filter(channel_uppercase %in% channel_names64)
oosten64_plot <- plot_ly() %>%
add_trace(data = oostenveld_filter_64,
type = "scatter3d",
x = ~-X,# minus because I can't flip xaxis on plot
y = ~Y,
z = ~Z,
text = ~channel,
marker = list(color = "black",
opacity = 1,
size = 2))
oosten64_plot
channels_128 <- read.csv("/home/andrewf/Documents/misc/work/channel_names_128.csv",
header = F)
names(channels_128) <- c("actiview",
"wired",
"channel_name")
channels_128$channel_name_uppercase <- channels_128$channel_name %>% toupper()
channel_names128 <- channels_128$channel_name_uppercase
oostenveld_filter_128 <- oostenveld_channels %>%
filter(channel_uppercase %in% channel_names128)
oostenveld_filter_128
channels_128 <- read.csv("/home/andrewf/Documents/misc/work/channel_names_128.csv",
header = F)
names(channels_128) <- c("actiview",
"wired",
"channel_name")
channels_128$channel_name_uppercase <- channels_128$channel_name %>% toupper()
channel_names128 <- channels_128$channel_name_uppercase
oostenveld_filter_128 <- oostenveld_channels %>%
filter(channel_uppercase %in% channel_names128)
not_found_oostenv <- !(oostenveld_channels$channel_uppercase %in% channel_names128)
not_found_128 <- !(channel_names128 %in% oostenveld_channels$channel_uppercase)
oostenveld_128 <- oostenveld_channels$channel_uppercase[!not_found_oostenv]
channel_names128[not_found_128]
oostenveld_128 <- c(oostenveld_128, "zplaceholder")
oostenveld_128 <- sort(oostenveld_128)
hold <- tibble(oostenveld_128,
sort(channel_names128))
channels_128 <- read.csv("/home/andrewf/Documents/misc/work/channel_names_128.csv",
header = F)
names(channels_128) <- c("actiview",
"wired",
"channel_name")
channels_128$channel_name_uppercase <- channels_128$channel_name %>% toupper()
channel_names128 <- channels_128$channel_name_uppercase
oostenveld_filter_128 <- oostenveld_channels %>%
filter(channel_uppercase %in% channel_names128)
oosten128_plot <- plot_ly() %>%
add_trace(data = oostenveld_filter_64,
type = "scatter3d",
x = ~-X,# minus because I can't flip xaxis on plot
y = ~Y,
z = ~Z,
text = ~channel,
marker = list(color = "black",
opacity = 1,
size = 2))
oosten128_plot
oosten128_plot <- plot_ly() %>%
add_trace(data = oostenveld_filter_128,
type = "scatter3d",
x = ~-X,# minus because I can't flip xaxis on plot
y = ~Y,
z = ~Z,
text = ~channel,
marker = list(color = "black",
opacity = 1,
size = 2))
oosten128_plot
load("data/biosemi64_channel_numbers_names.RData")
View(biosemi64_channel_numbers_names)
load("data/biosemi64_channel_numbers_names.RData")
biosemi_64_coors <- read.csv("/home/andrewf/Documents/misc/work/cart_coordinates_biosemi_calc_64_temp.csv")
biosemi_64_coors$X <- - biosemi_64_coors$X
biosemi64_channel_numbers_names[biosemi64_channel_numbers_names$channel_name == "PO5",2:3] <- "PO7"
hold <- tibble(biosemi_64_coors$channel, biosemi64_channel_numbers_names$channel_name_uppercase[1:64])
biosemi64_channel_numbers_names_2 <- biosemi64_channel_numbers_names %>%
slice(1:64) %>%
mutate("original_X"     = biosemi_64_coors$X,
"original_Y"     = biosemi_64_coors$Y,
"original_Z"     = biosemi_64_coors$Z,
"original_theta" = biosemi_64_coors$theta,
"original_phi"   = biosemi_64_coors$phi,
"orig_theta_deg" = rad2deg(original_theta),
"orig_phi_deg"   = rad2deg(original_phi),
"calc_X"         = -(sin(original_theta) * cos(original_phi)),
"calc_Y"         = sin(original_theta) * sin(original_phi),
"calc_Z"         = cos(original_theta))
View(biosemi64_channel_numbers_names_2)
View(channels_128)
biosemi64_channel_info <- data.frame()
biosemi64_channel_info$channel_number <- biosemi64_channel_numbers_names_2$channel_number
biosemi64_channel_info <- matrix()
biosemi64_channel_info$channel_number <- biosemi64_channel_numbers_names_2$channel_number
View(biosemi64_channel_info)
biosemi64_channel_info <- data.frame()
biosemi64_channel_info$channel_number <- biosemi64_channel_numbers_names_2$channel_number
biosemi64_channel_info <- data.frame("channel_number" = biosemi64_channel_numbers_names_2$channel_number,
"channel_name"   = biosemi64_channel_numbers_names_2$channel_name,
"channel_name_uppercase" = biosemi64_channel_numbers_names_2$channel_name_uppercase)
View(biosemi64_channel_info)
rad2deg(234)
deg2rad(234)
cart2phi_degrees(x_coor = .5874272, y_coor = -0.8085242)
biosemi64_channel_info <- data.frame("channel_number" = biosemi64_channel_numbers_names_2$channel_number,
"channel_name"   = biosemi64_channel_numbers_names_2$channel_name,
"channel_name_uppercase" = biosemi64_channel_numbers_names_2$channel_name_uppercase,
"X" = biosemi64_channel_numbers_names_2$original_X,
"Y" = biosemi64_channel_numbers_names_2$original_Y,
"Z" = biosemi64_channel_numbers_names_2$original_Z,
"EPosSphere_theta" = cart2theta_radians(biosemi64_channel_numbers_names_2$original_Z),
"EPosSphere_phi" = cart2phi_radians(biosemi64_channel_numbers_names_2$original_X,
biosemi64_channel_numbers_names_2$original_Y))
View(channels_128)
biosemi128_channel_info <- channels_128
oostenveld_filter_128$X
biosemi128_channel_info$X <- oostenveld_filter_128
biosemi128_channel_info <- channels_128
oostenveld_filter_128
biosemi128_channel_info <- channels_128
biosemi128_channel_info$X <- numeric()
biosemi128_channel_info$X <- as.numeric()
biosemi128_channel_info$X <- rep(NA, 128)
View(biosemi128_channel_info)
biosemi128_channel_info$X[1] <- 1.232
biosemi128_channel_info$X <- rep(NA, 128)
biosemi128_channel_info$Y <- rep(NA, 128)
biosemi128_channel_info$Z <- rep(NA, 128)
index <- 1
current_channel <- channel_names128[index]
biosemi128_channel_info %>%
filter(channel_name_uppercase == current_channel)
biosemi128_channel_info[index,]$wired
biosemi128_channel_info[index,]$X
oostenveld_filter_128[index]$X
oostenveld_filter_128[index,]$X
oostenveld_filter_128[index,]
oostenveld_filter_128 %>%
filter(channel_uppercase == current_channel)
oostenveld_filter_128 %>%
filter(channel_uppercase == current_channel)
oostenveld_filter_128 %>%
filter(channel_uppercase == current_channel) %>%
pull(X)
rm(index)
biosemi128_channel_info <- channels_128
biosemi128_channel_info$X <- rep(NA, 128)
biosemi128_channel_info$Y <- rep(NA, 128)
biosemi128_channel_info$Z <- rep(NA, 128)
for (index in 1:length(channel_names128)) {
current_channel <- channel_names128[index]
biosemi128_channel_info[index,]$X <-
oostenveld_filter_128 %>%
filter(channel_uppercase == current_channel) %>%
pull(X)
biosemi128_channel_info[index,]$Y <-
oostenveld_filter_128 %>%
filter(channel_uppercase == current_channel) %>%
pull(Y)
biosemi128_channel_info[index,]$Z <-
oostenveld_filter_128 %>%
filter(channel_uppercase == current_channel) %>%
pull(Z)
}
View(biosemi128_channel_info)
test_biosemi128_plot <- plot_ly() %>%
add_trace(data = biosemi128_channel_info,
type = "scatter3d",
x = ~-X,# minus because I can't flip xaxis on plot
y = ~Y,
z = ~Z,
text = ~channel,
marker = list(color = "black",
opacity = 1,
size = 2))
test_biosemi128_plot
test_biosemi128_plot <- plot_ly() %>%
add_trace(data = biosemi128_channel_info,
type = "scatter3d",
x = ~-X,# minus because I can't flip xaxis on plot
y = ~Y,
z = ~Z,
text = ~channel_name_uppercase,
marker = list(color = "black",
opacity = 1,
size = 2))
test_biosemi128_plot
biosemi128_channel_info %>%
mutate("EPosSphere_theta" = cart2theta_radians(Z),
"EPosSphere_phi" = cart2phi_radians(X, Y))
View(biosemi128_channel_info)
biosemi128_channel_info <- biosemi128_channel_info %>%
mutate("EPosSphere_theta" = cart2theta_radians(Z),
"EPosSphere_phi" = cart2phi_radians(X, Y))
View(biosemi128_channel_info)
biosemi128_channel_info
View(oostenveld_channels)
Oostenveld_channel_info <- data.frame("channel_name" = oostenveld_channels$channel,
"channel_name_uppercase" = oostenveld_channels$channel_uppercase,
"X" = oostenveld_channels$X,
"Y" = oostenveld_channels$Y,
"Z" = oostenveld_channels$Z,
"EPosSphere_theta" = cart2theta_radians(Z),
"EPosSphere_phi" = cart2phi_radians(X,Y))
Oostenveld_channel_info <- data.frame("channel_name" = oostenveld_channels$channel,
"channel_name_uppercase" = oostenveld_channels$channel_uppercase,
"X" = oostenveld_channels$X,
"Y" = oostenveld_channels$Y,
"Z" = oostenveld_channels$Z,
"EPosSphere_theta" = cart2theta_radians(oostenveld_channels$Z),
"EPosSphere_phi" = cart2phi_radians(oostenveld_channels$X,
oostenveld_channels$Y))
View(Oostenveld_channel_info)
save(list = c("biosemi64_channel_info",
"biosemi128_channel_info",
"Oostenveld_channel_info"), file = "data/data.RData")
load("/home/andrewf/Repositories/EMEGShelper/data/data.RData")
View(biosemi64_channel_info)
biosemi64_channel_info %>% names()
View(biosemi128_channel_info)
View(Oostenveld_channel_info)
devtools::document()
install.packages("AndrewHFarkas/EMEGShelper")
devtools::install_github("AndrewHFarkas/EMEGShelper")
? EMEGShelper::biosemi128_channel_info
patterns <- NULL
length(patterns)
1:0
dir()
#' @param average_timepoints Logical argument if selected time points should be averaged
#' @param average_channels Logical argument to average selected channels together
#' @param include_channel_name Logical argument for whether to put channel names in output dataframe
#' @param include_path_name Logical argument for whether to put path name in output dataframe
#' @param include_file_name Logical argument for whether to put file name in output dataframe
#' @return Returns a dataframe of the ERP data extracted from AR files
#'
#' @author Andrew H Farkas, \email{andrewhfarkas at g mail dot com}
#'
#' @export
read_ar_files <- function(data_folders = NULL,
patterns = NULL,
search_subfolders = F,
search_only_subfolders = F,
extract_channels = NULL,
baseline_pts = NULL,
select_time_points = NULL,
average_timepoints = F,
average_channels = F,
include_channel_name = F,
include_path_name = F,
include_file_name = F) {
if (is.null(data_folders)) {
stop("must give at least one path to a data folder")
}
if (is.null(patterns)) {
stop("must give at least one pattern to search for files (ex: 'ar'")
}
multiple_ar_files_df <- data.frame()
file_paths <- character()
number_of_folders <- length(data_folders)
for (folder_index in 1:number_of_folders) {
current_folder <- data_folders[folder_index]
files_in_current_folder <- character()
if (!search_only_subfolders) {
if (is.character(patterns)) {
number_of_patterns <- length(patterns)
for (pattern_index in 1:number_of_patterns) {
current_pattern <- patterns[pattern_index]
files_in_current_folder <- dir(current_folder,
pattern = current_pattern)
current_paths <- paste0(current_folder,
"/",
files_in_current_folder)
file_paths <- c(file_paths,
current_paths)
}
} else {
files_in_current_folder <- dir(current_folder)
current_paths <- paste0(current_folder,
"/",
files_in_current_folder)
file_paths <- c(file_paths,
current_paths)
}
if (search_subfolders) {
dirs <- list.dirs(path = current_folder,
full.names = F)
dirs <- tail(dirs, -1)
number_of_dirs <- length(dirs)
for (dir_index in 1:number_of_dirs) {
files_in_current_subfolder <- character()
current_dir <- dirs[dir_index]
current_subfolder <- paste0(current_folder,
"/",
current_dir)
if (is.character(patterns)) {
number_of_patterns <- length(patterns)
for (pattern_index in 1:number_of_patterns) {
current_pattern <- patterns[pattern_index]
files_in_current_subfolder <- dir(current_subfolder,
pattern = current_pattern)
current_paths <- paste0(current_subfolder,
"/",
files_in_current_subfolder)
file_paths <- c(file_paths,
current_paths)
}
} else {
files_in_current_subfolder <- dir(current_subfolder)
current_paths <- paste0(current_subfolder,
"/",
files_in_current_subfolder)
file_paths <- c(file_paths,
current_paths)
}
}
}
}
}
number_of_paths <- length(file_paths)
for (path_index in 1:number_of_paths) {
current_path <- file_paths[path_index]
current_df <- read_ar_file(path_to_ar = current_path,
extract_channels = extract_channels,
baseline_pts = baseline_pts,
select_time_points = select_time_points,
average_timepoints = average_timepoints,
average_channels = average_channels,
include_channel_name = include_channel_name,
include_path_name = include_path_name,
include_file_name = include_file_name)
multiple_ar_files_df <- rbind.data.frame(multiple_ar_files_df, current_df)
}
multiple_ar_files_df
}
read_ar_files(data_folders = "test")
devtools::document()
devtools::document()
EMEGShelper::Oostenveld_channel_info
devtools::document()
