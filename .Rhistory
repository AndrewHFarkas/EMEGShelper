current_trigger <- target_triggers[trigger_index]
number_of_samples_row <- which(marker_lines == current_trigger) +10
first_trial_marker <- which(marker_lines == current_trigger) +13
number_of_triggers_to_remove <- length(delete_trigger_numbers)
new_number_of_triggers <- as.numeric(marker_lines[number_of_samples_row]) -
number_of_triggers_to_remove
new_marker_lines[number_of_samples_row] <- as.character(new_number_of_triggers)
trigger_rows_to_remove <- first_trial_marker + delete_trigger_numbers -1
new_marker_lines <- new_marker_lines[-trigger_rows_to_remove]
writeLines(text = new_marker_lines, con = current_file_path)
}
}
}
marker_file_editor(folders = folder_paths,
target_triggers = "Stim11",
delete_trigger_numbers = 1)
#'
#' @author Andrew H Farkas, \email{andrewhfarkas@gmail.com}
#'
#' @export
marker_file_editor <- function(folders = NULL,
target_triggers = NULL,
delete_trigger_numbers = NULL) {
if (!is.character(folders) |
!is.character(target_triggers) |
!is.numeric(delete_trigger_numbers)) {
stop()
}
if (!(delete_trigger_numbers > 0)) {
stop()
}
# get paths to all marker files
file_paths <- character()
for (folder_index in 1:length(folders)) {
current_folder_path <- folders[folder_index]
meg_folder <- dir(current_folder_path, pattern = ".ds")
meg_folder_path <- file.path(current_folder_path, meg_folder)
current_file_path <- file.path(meg_folder_path,
"MarkerFile.mrk")
path_to_folder_of_original <- file.path(current_folder_path,
"original_markerfile")
if (!file.exists(path_to_folder_of_original)) {
dir.create(path = path_to_folder_of_original)
file.copy(current_file_path, path_to_folder_of_original)
}
file_paths <- c(file_paths, current_file_path)
}
# maybe search sub folders
browser()
for (path_index in 1:length(file_paths)) {
current_marker <- file_paths[path_index]
marker_lines <- readLines(con = current_marker)
new_marker_lines <- marker_lines
for (trigger_index in 1:length(target_triggers)) {
current_trigger <- target_triggers[trigger_index]
number_of_samples_row <- which(marker_lines == current_trigger) +10
first_trial_marker <- which(marker_lines == current_trigger) +13
number_of_triggers_to_remove <- length(delete_trigger_numbers)
new_number_of_triggers <- as.numeric(marker_lines[number_of_samples_row]) -
number_of_triggers_to_remove
new_marker_lines[number_of_samples_row] <- as.character(new_number_of_triggers)
trigger_rows_to_remove <- first_trial_marker + delete_trigger_numbers -1
new_marker_lines <- new_marker_lines[-trigger_rows_to_remove]
writeLines(text = new_marker_lines, con = current_marker)
}
}
}
#'
#' @author Andrew H Farkas, \email{andrewhfarkas@gmail.com}
#'
#' @export
marker_file_editor <- function(folders = NULL,
target_triggers = NULL,
delete_trigger_numbers = NULL) {
if (!is.character(folders) |
!is.character(target_triggers) |
!is.numeric(delete_trigger_numbers)) {
stop()
}
if (!(delete_trigger_numbers > 0)) {
stop()
}
# get paths to all marker files
file_paths <- character()
for (folder_index in 1:length(folders)) {
current_folder_path <- folders[folder_index]
meg_folder <- dir(current_folder_path, pattern = ".ds")
meg_folder_path <- file.path(current_folder_path, meg_folder)
current_file_path <- file.path(meg_folder_path,
"MarkerFile.mrk")
path_to_folder_of_original <- file.path(current_folder_path,
"original_markerfile")
if (!file.exists(path_to_folder_of_original)) {
dir.create(path = path_to_folder_of_original)
file.copy(current_file_path, path_to_folder_of_original)
}
file_paths <- c(file_paths, current_file_path)
}
# maybe search sub folders
browser()
for (path_index in 1:length(file_paths)) {
current_marker <- file_paths[path_index]
marker_lines <- readLines(con = current_marker)
new_marker_lines <- marker_lines
for (trigger_index in 1:length(target_triggers)) {
current_trigger <- target_triggers[trigger_index]
number_of_samples_row <- which(marker_lines == current_trigger) +10
first_trial_marker <- which(marker_lines == current_trigger) +13
number_of_triggers_to_remove <- length(delete_trigger_numbers)
new_number_of_triggers <- as.numeric(marker_lines[number_of_samples_row]) -
number_of_triggers_to_remove
new_marker_lines[number_of_samples_row] <- as.character(new_number_of_triggers)
trigger_rows_to_remove <- first_trial_marker + delete_trigger_numbers -1
new_marker_lines <- new_marker_lines[-trigger_rows_to_remove]
writeLines(text = new_marker_lines, con = current_marker)
}
}
}
marker_file_editor(folders = folder_paths,
target_triggers = "Stim11",
delete_trigger_numbers = 1)
#'
#' @author Andrew H Farkas, \email{andrewhfarkas@gmail.com}
#'
#' @export
marker_file_editor <- function(folders = NULL,
target_triggers = NULL,
delete_trigger_numbers = NULL) {
if (!is.character(folders) |
!is.character(target_triggers) |
!is.numeric(delete_trigger_numbers)) {
stop()
}
if (!(delete_trigger_numbers > 0)) {
stop()
}
# get paths to all marker files
file_paths <- character()
for (folder_index in 1:length(folders)) {
current_folder_path <- folders[folder_index]
meg_folder <- dir(current_folder_path, pattern = ".ds")
meg_folder_path <- file.path(current_folder_path, meg_folder)
current_file_path <- file.path(meg_folder_path,
"MarkerFile.mrk")
path_to_folder_of_original <- file.path(current_folder_path,
"original_markerfile")
if (!file.exists(path_to_folder_of_original)) {
dir.create(path = path_to_folder_of_original)
file.copy(current_file_path, path_to_folder_of_original)
}
file_paths <- c(file_paths, current_file_path)
}
# maybe search sub folders
for (path_index in 1:length(file_paths)) {
current_marker <- file_paths[path_index]
marker_lines <- readLines(con = current_marker)
new_marker_lines <- marker_lines
for (trigger_index in 1:length(target_triggers)) {
current_trigger <- target_triggers[trigger_index]
number_of_samples_row <- which(marker_lines == current_trigger) +10
first_trial_marker <- which(marker_lines == current_trigger) +13
number_of_triggers_to_remove <- length(delete_trigger_numbers)
new_number_of_triggers <- as.numeric(marker_lines[number_of_samples_row]) -
number_of_triggers_to_remove
new_marker_lines[number_of_samples_row] <- as.character(new_number_of_triggers)
trigger_rows_to_remove <- first_trial_marker + delete_trigger_numbers -1
new_marker_lines <- new_marker_lines[-trigger_rows_to_remove]
writeLines(text = new_marker_lines, con = current_marker)
}
}
}
marker_file_editor(folders = folder_paths,
target_triggers = "Stim11",
delete_trigger_numbers = 1)
folder_paths <- folder_paths[1:2]
marker_file_editor(folders = folder_paths,
target_triggers = "Stim11",
delete_trigger_numbers = 1)
folder_paths <- folder_paths[1:2]
marker_file_editor(folders = folder_paths,
target_triggers = "Stim11",
delete_trigger_numbers = 1)
folder_paths
folder_paths <- possible_dir_paths[grepl(pattern = "*run_[1+2]$", possible_dir_paths)]
folder_paths <- folder_paths[1:2]
folder_paths
folder_paths <- folder_paths[1:2]
folder_paths <- possible_dir_paths[grepl(pattern = "*run_[1+2]$", possible_dir_paths)]
folder_paths <- folder_paths[1:2]
folder_paths
folder_paths <- possible_dir_paths[grepl(pattern = "*run_[1+2]$", possible_dir_paths)]
folder_paths <- folder_paths[1:4]
folder_paths
marker_file_editor(folders = folder_paths,
target_triggers = "Stim11",
delete_trigger_numbers = 1)
close_then_stop <- function(error_message, open_file_connection) {
close(open_file_connection)
stop(error_message)
}
find_files_paths <- function(path,
pattern,
open_file_connection) {
if (missing(path) ||
missing(pattern) ||
missing(open_file_connection)) {
close_then_stop("all three arguments are necessary",
open_file_connection)
}
lines <- character()
files <- dir(path, pattern = pattern)
number_of_files <- length(files)
if (number_of_files == 0) return()
for (file_index in 1:number_of_files) {
path_to_file <- paste0(path,
"/",
files[file_index])
elements_of_path <- stringr::str_split(path_to_file,
"/")
elements_of_path <- unlist(elements_of_path)
elements_with_slash <- paste0(elements_of_path,
"\\")
collapsed_elements <- paste(elements_with_slash,
collapse = "")
collapsed_elements <- substr(collapsed_elements,
start = 1,
stop = nchar(path_to_file))
lines <- c(lines, collapsed_elements)
}
lines
}
mac_find_files_paths <- function(path,
pattern,
open_file_connection) {
if (missing(path) ||
missing(pattern) ||
missing(open_file_connection)) {
close_then_stop("all three arguments are necessary",
open_file_connection)
}
lines <- character()
files <- dir(path, pattern = pattern)
number_of_files <- length(files)
if (number_of_files == 0) return()
for (file_index in 1:number_of_files) {
path_to_file <- paste0(path,
"/",
files[file_index])
lines <- c(lines, path_to_file)
}
lines
}
test_path_ar <- '/run/media/andrewf/USB DISK/temp_data_to_share/emegs test/just_at/EX009_2.f.at1.ar'
test_path_ar <- '/run/media/andrewf/USB DISK/temp_data_to_share/emegs test/just_at/EX009_2.f.at1.ar'
AR_file <<- test_path_ar
#finish this
#grab version number
reticulate::py_run_string("version = struct.unpack_from(\">7sh\", open(r.AR_file,\"rb\").read())")
#finish this
#grab version number
reticulate::py_run_string("version = struct.unpack_from(\">7sh\", open(r.AR_file,\"rb\").read())")
library(reticulate)
#finish this
#grab version number
reticulate::py_run_string("version = struct.unpack_from(\">7sh\", open(r.AR_file,\"rb\").read())")
reticulate::py_run_string("import numpy as np")
reticulate::py_run_string("import array")
reticulate::py_run_string("import struct")
AR_file <<- test_path_ar
#finish this
#grab version number
reticulate::py_run_string("version = struct.unpack_from(\">7sh\", open(r.AR_file,\"rb\").read())")
reticulate::py_run_string("version_num = version[1]")
version_num <- reticulate::py$version_num
if (version_num == 9){
# AR file starts with some information about the file, here we create keys for the information that will be distracted
reticulate::py_run_string("keys = \"VStr vNum EegMeg nChan_extra trigPoint dType unknown_1 unknown_2 num_elec data_pts\".split()")
# unpack string says unpack a string of 7 characters, followed by a short int followed by 8 float32
reticulate::py_run_string("ERP_dict = dict(zip(keys,struct.unpack_from(\">7sh8f\",open(r.AR_file,\"rb\").read())))")
# create new string to tell python how many data points there are to extract based on info from the AR file
reticulate::py_run_string("avgmat_length_str ='>7sh8f' + str(int(ERP_dict[\"num_elec\"]*ERP_dict[\"data_pts\"])) + 'f'")
# read the AR file and extract AR data
reticulate::py_run_string("fid = open(r.AR_file,\"rb\").read()")
reticulate::py_run_string("all_dat = struct.unpack_from(avgmat_length_str, fid)")
reticulate::py_run_string("avg_mat = all_dat[10:]")
#get number of electrodes
reticulate::py_run_string("ar_info = struct.unpack_from(\">7sh8f\", open(r.AR_file,\"rb\").read())")
reticulate::py_run_string("electrode_num = ar_info[8]")
electrode_num <- reticulate::py$electrode_num
}
avg_mat <- reticulate::py$avg_mat
avg_mat <- as.data.frame(matrix(unlist(avg_mat), nrow = electrode_num))
#for testing
file_to_overwrite <- '/run/media/andrewf/USB DISK/temp_data_to_share/emegs test/just_at/EX009_2.f.at1.ar'
pca_weight_vec <- 1:64
View(avg_mat)
write_path <- '/run/media/andrewf/USB DISK/temp_data_to_share/emegs test/just_at/'
file.copy(from = file_to_overwrite, to = write_path)
write_path <- '/run/media/andrewf/USB DISK/temp_data_to_share/emegs test/just_at/test.at1.ar'
file.copy(from = file_to_overwrite, to = write_path)
file.copy(from = file_to_overwrite,
to = write_path,
overwrite = F)
file.copy(from = file_to_overwrite,
to = write_path,
overwrite = F)
reticulate::py$avg_mat
unlist(avg_mat)
py$avg_mat %>% length()
library(tidyverse)
py$avg_mat %>% length()
py$avg_mat
py$avg_mat %>% unlist()
py$avg_mat %>% str()
list(1:3)
list(1,1)
list(as.numeric(1))
list(as.numeric(1.23))
list(1:2) %>% str()
list(1.123,2.123) %>% str()
py$avg_mat
py$avg_mat = 1
AR_file <<- file_to_overwrite
#grab version number
reticulate::py_run_string("version = struct.unpack_from(\">7sh\", open(r.AR_file,\"rb\").read())")
reticulate::py_run_string("version_num = version[1]")
version_num <- reticulate::py$version_num
if (version_num == 8) {
# AR file starts with some information about the file, here we create keys for the information that will be distracted
reticulate::py_run_string("keys = \"VStr vNum EegMeg nChan_extra trigPoint dType num_elec data_pts\".split()")
# unpack string says unpack a string of 7 characters, followed by a short int followed by 6 float32
reticulate::py_run_string("ERP_dict = dict(zip(keys,struct.unpack_from(\">7sh6f\",open(r.AR_file,\"rb\").read())))")
# create new string to tell python how many data points there are to extract based on info from the AR file
reticulate::py_run_string("avgmat_length_str ='>7sh6f' + str(int(ERP_dict[\"num_elec\"]*ERP_dict[\"data_pts\"])) + 'f'")
# read the AR file and extract AR data
reticulate::py_run_string("fid = open(r.AR_file,\"rb\").read()")
reticulate::py_run_string("all_dat = struct.unpack_from(avgmat_length_str, fid)")
reticulate::py_run_string("avg_mat = all_dat[8:]")
#get number of electrodes
reticulate::py_run_string("ar_info = struct.unpack_from(\">7sh6f\", open(r.AR_file,\"rb\").read())")
reticulate::py_run_string("electrode_num = ar_info[6]")
electrode_num <- reticulate::py$electrode_num
}
if (version_num == 9){
# AR file starts with some information about the file, here we create keys for the information that will be distracted
reticulate::py_run_string("keys = \"VStr vNum EegMeg nChan_extra trigPoint dType unknown_1 unknown_2 num_elec data_pts\".split()")
# unpack string says unpack a string of 7 characters, followed by a short int followed by 8 float32
reticulate::py_run_string("ERP_dict = dict(zip(keys,struct.unpack_from(\">7sh8f\",open(r.AR_file,\"rb\").read())))")
# create new string to tell python how many data points there are to extract based on info from the AR file
reticulate::py_run_string("avgmat_length_str ='>7sh8f' + str(int(ERP_dict[\"num_elec\"]*ERP_dict[\"data_pts\"])) + 'f'")
# read the AR file and extract AR data
reticulate::py_run_string("fid = open(r.AR_file,\"rb\").read()")
reticulate::py_run_string("all_dat = struct.unpack_from(avgmat_length_str, fid)")
reticulate::py_run_string("avg_mat = all_dat[10:]")
#get number of electrodes
reticulate::py_run_string("ar_info = struct.unpack_from(\">7sh8f\", open(r.AR_file,\"rb\").read())")
reticulate::py_run_string("electrode_num = ar_info[8]")
electrode_num <- reticulate::py$electrode_num
}
if (!(version_num %in% c(8,9))) {
stop("Something went wrong, check that an appropriate AR file is used")
}
avg_mat <- reticulate::py$avg_mat
unlist(avg_mat)
rep(pca_weight_vec,1)
rep(pca_weight_vec, 2)
py$ERP_dict
rep(pca_weight_vec, py$ERP_dict[1])
py$ERP_dict["data_pts"]
rep(pca_weight_vec, py$ERP_dict["data_pts"])
reticulate::repl_python()
reticulate::py_run_string("struct.pack(\">7sh8f\"), ar_info")
reticulate::py_run_string("ar_info")
reticulate::py_run_string("1+1")
reticulate::py_run_string("print(hello)")
reticulate::py_run_string("print(\"hello\")")
reticulate::py_run_string("print(ar_info)")
reticulate::py_run_string("struct.pack(\">7sh8f\"), ar_info")
reticulate::py_run_string("struct.pack(\">7sh8f\", ar_info)")
reticulate::py_run_string("struct.pack(\">7sh8f\", *ar_info)")
reticulate::py_run_string("print(struct.pack(\">7sh8f\", *ar_info))")
repeated_pca_weights <- list(rep(pca_weight_vec, py$ERP_dict["data_pts"]))
repeated_pca_weights
py$avg_mat <- repeated_pca_weights
reticulate::repl_python()
repeated_pca_weights
repeated_pca_weights <- list(rep(pca_weight_vec, py$ERP_dict["data_pts"]))
split(repeated_pca_weights)
repeated_pca_weights <- list()
repeated_pca_weights[1:3] <- 1:3
repeated_pca_weights
repeated_pca_weights <- rep(pca_weight_vec, py$ERP_dict["data_pts"])
length(repeated_pca_weights)
repeated_pca_weights_list[1:length(repeated_pca_weights)] <- repeated_pca_weights
repeated_pca_weights_list[1:length(repeated_pca_weights)] <- repeated_pca_weights
repeated_pca_weights_list <- list()
repeated_pca_weights_list[1:length(repeated_pca_weights)] <- repeated_pca_weights
repeated_pca_weights_list
py$avg_mat <- repeated_pca_weights_list
reticulate::py_run_string("print(struct.pack(\"avgmat_length\", *ar_info*avg_mat))")
reticulate::py_run_string("print(struct.pack(\"avgmat_length\", *ar_info *avg_mat))")
reticulate::py_run_string("print(struct.pack(\"avgmat_length\", *ar_info))")
reticulate::py_run_string("print(struct.pack(\">7sh8f\", *ar_info))")
reticulate::py_run_string("print(struct.pack(\"avgmat_length\", *ar_info + *avg_mat))")
reticulate::py_run_string("print(struct.pack(\"avgmat_length\", *ar_info + avg_mat))")
reticulate::py_run_string("print(struct.pack(\">7sh8f\", *ar_info) + struct.pack(\">7sh8f\", *ar_info))")
reticulate::py_run_string("print(struct.pack(\">7sh8f\", *ar_info) + struct.pack(str(int(ERP_dict[\"num_elec\"]*ERP_dict[\"data_pts\"])) + 'f', *avg_mat))")
reticulate::py_run_string("bytes_to_write = struct.pack(\">7sh8f\", *ar_info) + struct.pack(str(int(ERP_dict[\"num_elec\"]*ERP_dict[\"data_pts\"])) + 'f', *avg_mat)")
reticulate::py_run_string("newFile = open(\"filename.at\", \"wb\")")
# write to file
reticulate::py_run_string("newFile.write(bytes_to_write)")
py$write_path <- write_path
reticulate::py_run_string("newFile = open(write_path, \"wb\")")
# write to file
reticulate::py_run_string("newFile.write(bytes_to_write)")
reticulate::repl_python()
#for testing
file_to_overwrite <- '/run/media/andrewf/USB DISK/temp_data_to_share/emegs test/just_at/EX009_2.f.at1.ar'
pca_weight_vec <- 1:64
write_path <- '/run/media/andrewf/USB DISK/temp_data_to_share/emegs test/just_at/test.at1.ar'
reticulate::py_run_string("import numpy as np")
reticulate::py_run_string("import array")
reticulate::py_run_string("import struct")
AR_file <<- file_to_overwrite
#grab version number
reticulate::py_run_string("version = struct.unpack_from(\">7sh\", open(r.AR_file,\"rb\").read())")
#grab version number
reticulate::py_run_string("version = struct.unpack_from(\">7sh\", open(r.AR_file,\"rb\").read())")
reticulate::py_run_string("version_num = version[1]")
reticulate::py$version_num
library(reticulate)
py$version
py$version_num
# AR file starts with some information about the file, here we create keys for the information that will be distracted
reticulate::py_run_string("keys = \"VStr vNum EegMeg nChan_extra trigPoint dType unknown_1 unknown_2 num_elec data_pts\".split()")
# unpack string says unpack a string of 7 characters, followed by a short int followed by 8 float32
reticulate::py_run_string("ERP_dict = dict(zip(keys,struct.unpack_from(\">7sh8f\",open(r.AR_file,\"rb\").read())))")
py$ERP_dict
# read the AR file and extract AR data
reticulate::py_run_string("fid = open(r.AR_file,\"rb\").read()")
py$fid
# create new string to tell python how many data points there are to extract based on info from the AR file
reticulate::py_run_string("avgmat_length_str ='>7sh8f' + str(int(ERP_dict[\"num_elec\"]*ERP_dict[\"data_pts\"])) + 'f'")
py$avgmat_length_str
1==1
1==1 & 2==2
1==1 & 2==1
1==1 && 2==1
1==1 && 2==1
c(1,2) ==1
c(1,2) =1
c(1,2) = =1
T && T
T && F
for (i in 1:10)
{
for (j in 1:10)
{
for (k in 1:10)
{
cat(i," ",j," ",k,"\n")
if (k ==5) break
}
}
}
for (i in 1:10)
{
for (j in 1:10)
{
for (k in 1:10)
{
cat(i," ",j," ",k,"\n")
if (i ==5) break
}
}
}
i in 1:10
for (i in 1:10)
{
for (j in 1:10)
{
for (k in 1:10)
{
cat(i," ",j," ",k,"\n")
if (k ==5) break
}
}
}
for (i in 1:10)
{
for (j in 1:10)
{
for (k in 1:10)
{
cat(i," ",j," ",k,"\n")
if (j ==5) break
}
}
}
for (i in 1:10)
{
for (j in 1:10)
{
for (k in 1:10)
{
if (j ==5) break
cat(i," ",j," ",k,"\n")
}
}
}
folder <- "/home/andrewf/Research_data/MEG/UGA_scene_faces/raw/meg1001/run_1"
folder <- "/home/andrewf/Research_data/MEG/UGA_scene_faces/raw/meg1001/run_1"
