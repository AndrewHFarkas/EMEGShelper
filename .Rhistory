text = ~channel_name,
marker = list(color = "black",
opacity = 1,
size = 2))
original_plot
calc_plot
biosemi64_channel_numbers_names_2 <- biosemi64_channel_numbers_names %>%
slice(1:64) %>%
mutate("original_X"     = biosemi_64_coors$X,
"original_Y"     = biosemi_64_coors$Y,
"original_Z"     = biosemi_64_coors$Z,
"original_theta" = biosemi_64_coors$theta,
"original_phi"   = biosemi_64_coors$phi,
"orig_theta_deg" = rad2deg(original_theta),
"orig_phi_deg"   = rad2deg(original_phi),
"calc_X"         = sin(original_theta) * cos(original_phi),
"calc_Y"         = sin(original_theta) * sin(original_phi),
"calc_Z"         = cos(original_theta))
original_plot <- plot_ly() %>%
add_trace(data = biosemi64_channel_numbers_names_2,
type = "scatter3d",
x = ~-original_X,# minus because I can't flip xaxis on plot
y = ~original_Y,
z = ~original_Z,
text = ~channel_name,
marker = list(color = "black",
opacity = 1,
size = 2))
calc_plot <- plot_ly() %>%
add_trace(data = biosemi64_channel_numbers_names_2,
type = "scatter3d",
x = ~-calc_X,# minus because I can't flip xaxis on plot
y = ~calc_Y,
z = ~calc_Z,
text = ~channel_name,
marker = list(color = "black",
opacity = 1,
size = 2))
calc_plot
#' and degrees. Theta is 0 at Cz pi at other pole. Phi is zero at right ear, pi/2 (90°) at
#' nose, pi (180°) at left ear, 3/2*pi (270°) at Oz.
#'
#' @param theta_radians angle in radians from north pole Cz
#' @param phi_radians angle in radians from right ear to nose
#' @return Returns a named vector with X, Y, and Z coordinates
#'
#' @author Andrew H Farkas, \email{andrewhfarkas at g mail dot com}
#'
#' @export
polar2cart <- function(theta_radians, phi_radians) {
browser()
if (theta_radians < 0 || theta_radians > pi) {
stop("theta_radians has to be within 0 and pi")
}
if (phi_radians < 0 || phi_radians > (2*pi)) {
stop("phi_radians has to be within 0 and 2*pi")
}
z_coor = cos(theta_radians)
y_coor = sin(theta_radians) * sin(phi_radians)
x_coor = -(sin(theta_radians) * cos(phi_radians))
cart_coor_check(x_coor, y_coor, z_coor)
cart_coors <- c(x_coor, y_coor, z_coor)
names(cart_coors) <- c("X", "Y", "Z")
cart_coors
}
biosemi64_channel_numbers_names_2 <- biosemi64_channel_numbers_names %>%
slice(1:64) %>%
mutate("original_X"     = biosemi_64_coors$X,
"original_Y"     = biosemi_64_coors$Y,
"original_Z"     = biosemi_64_coors$Z,
"original_theta" = biosemi_64_coors$theta,
"original_phi"   = biosemi_64_coors$phi,
"orig_theta_deg" = rad2deg(original_theta),
"orig_phi_deg"   = rad2deg(original_phi),
"calc_X"         = -(sin(original_theta) * cos(original_phi)),
"calc_Y"         = sin(original_theta) * sin(original_phi),
"calc_Z"         = cos(original_theta))
original_plot <- plot_ly() %>%
add_trace(data = biosemi64_channel_numbers_names_2,
type = "scatter3d",
x = ~-original_X,# minus because I can't flip xaxis on plot
y = ~original_Y,
z = ~original_Z,
text = ~channel_name,
marker = list(color = "black",
opacity = 1,
size = 2))
calc_plot <- plot_ly() %>%
add_trace(data = biosemi64_channel_numbers_names_2,
type = "scatter3d",
x = ~-calc_X,# minus because I can't flip xaxis on plot
y = ~calc_Y,
z = ~calc_Z,
text = ~channel_name,
marker = list(color = "black",
opacity = 1,
size = 2))
original_plot
calc_plot
View(oosteveld_channels)
## load data
oostenveld_link <- 'https://robertoostenveld.nl/electrodes/plotting_1005.txt'
oostenveld_channels <- read_table(file = oosteveld_link,
col_names = F) %>%
suppressWarnings()
oostenveld_channels <- oosteveld_channels[,1:4]
names(oosteveld_channels) <- c("channel",
"Y",
"X",
"Z")
## load data
oostenveld_link <- 'https://robertoostenveld.nl/electrodes/plotting_1005.txt'
oostenveld_channels <- read_table(file = oosteveld_link,
col_names = F) %>%
suppressWarnings()
## load data
oostenveld_link <- 'https://robertoostenveld.nl/electrodes/plotting_1005.txt'
oostenveld_channels <- read_table(file = oostenveld_link,
col_names = F) %>%
suppressWarnings()
oostenveld_channels <- oosteveld_channels[,1:4]
oostenveld_channels <- oostenveld_channels[,1:4]
names(oostenveld_channels) <- c("channel",
"Y",
"X",
"Z")
oostenveld_channels <- tibble(oostenveld_channels)
oostenveld_coordinates_plot <- plot_ly() %>%
add_trace(data = oostenveld_channels,
type = "scatter3d",
x = ~-X,
y = ~Y,
z = ~Z,
text = ~channel,
marker = list(color = "black",
opacity = 1,
size = 2))
oostenveld_coordinates_plot
load("data/biosemi64_channel_numbers_names.RData")
biosemi_64_coors <- read.csv("/home/andrewf/Documents/misc/work/cart_coordinates_biosemi_calc_64_temp.csv")
biosemi_64_coors$X <- - biosemi_64_coors$X
biosemi64_channel_numbers_names[biosemi64_channel_numbers_names$channel_name == "PO5",2:3] <- "PO7"
hold <- tibble(biosemi_64_coors$channel, biosemi64_channel_numbers_names$channel_name_uppercase[1:64])
#' and degrees. Theta is 0 at Cz pi at other pole. Phi is zero at right ear, pi/2 (90°) at
#' nose, pi (180°) at left ear, 3/2*pi (270°) at Oz.
#'
#' @param theta_radians angle in radians from north pole Cz
#' @param phi_radians angle in radians from right ear to nose
#' @return Returns a named vector with X, Y, and Z coordinates
#'
#' @author Andrew H Farkas, \email{andrewhfarkas at g mail dot com}
#'
#' @export
polar2cart <- function(theta_radians, phi_radians) {
browser()
if (theta_radians < 0 || theta_radians > pi) {
stop("theta_radians has to be within 0 and pi")
}
if (phi_radians < 0 || phi_radians > (2*pi)) {
stop("phi_radians has to be within 0 and 2*pi")
}
z_coor = cos(theta_radians)
y_coor = sin(theta_radians) * sin(phi_radians)
x_coor = -(sin(theta_radians) * cos(phi_radians))
cart_coor_check(x_coor, y_coor, z_coor)
cart_coors <- c(x_coor, y_coor, z_coor)
names(cart_coors) <- c("X", "Y", "Z")
cart_coors
}
test_matrix <- matrix(nrow = 0, ncol = 5)
for (index in 1:nrow(oostenveld_channels)) {
current_x <- oostenveld_channels$X[index]
current_y <- oostenveld_channels$Y[index]
current_z <- oostenveld_channels$Z[index]
current_channel <- cart2polar(current_x,
current_y,
current_z)
current_channel <- c(oostenveld_channels$channel[index],
current_channel)
test_matrix <- rbind(test_matrix, t(current_channel))
}
#' Oz.
#'
#' @param x_coor x coordinate between -1 and 1
#' @param y_coor y coordinate between -1 and 1
#' @param z_coor z coordinate between -1 and 1
#' @return Returns a named vector with theta and phi in degrees and radians
#'
#' @author Andrew H Farkas, \email{andrewhfarkas at g mail dot com}
#'
#' @export
cart2polar <- function(x_coor, y_coor, z_coor) {
cart_coor_check(x_coor, y_coor, z_coor)
theta_radians  <- cart2theta_radians(z_coor)
theta_degrees  <- cart2theta_degrees(z_coor)
phi_radians    <- cart2phi_radians(x_coor, y_coor)
phi_degrees    <- cart2phi_degrees(x_coor, y_coor)
polar_coor_vec <- c(theta_radians, theta_degrees,
phi_radians,   phi_degrees)
polar_coor_vec
}
test_matrix <- matrix(nrow = 0, ncol = 5)
for (index in 1:nrow(oostenveld_channels)) {
current_x <- oostenveld_channels$X[index]
current_y <- oostenveld_channels$Y[index]
current_z <- oostenveld_channels$Z[index]
current_channel <- cart2polar(current_x,
current_y,
current_z)
current_channel <- c(oostenveld_channels$channel[index],
current_channel)
test_matrix <- rbind(test_matrix, t(current_channel))
}
cart_coor_check <- function(x_coor, y_coor, z_coor) {
browser()
if (-1 > x_coor || -1 > y_coor || -1 >  z_coor) {
stop("each coordinate has to be within -1 and 1")
}
if (1 < x_coor || 1 < y_coor || 1 <  z_coor) {
stop("each coordinate has to be within -1 and 1")
}
if (any(((x_coor^2) + (y_coor^2) + (z_coor^2)) > 1.001)) {
stop("cartesian coordinate is outside of a sphere with a radius of 1")
}
if (any(((x_coor^2) + (y_coor^2) + (z_coor^2)) < .95)) {
warning("cartesian coordinate is likely not on the sphere")
}
}
test_matrix <- matrix(nrow = 0, ncol = 5)
for (index in 1:nrow(oostenveld_channels)) {
current_x <- oostenveld_channels$X[index]
current_y <- oostenveld_channels$Y[index]
current_z <- oostenveld_channels$Z[index]
current_channel <- cart2polar(current_x,
current_y,
current_z)
current_channel <- c(oostenveld_channels$channel[index],
current_channel)
test_matrix <- rbind(test_matrix, t(current_channel))
}
#' Takes Cartesian X and Y coordinates and returns phi angle in degrees which is 0
#' at the right ear or an X at -1 and Y at 0.
#'
#'
#' @param x_coor x coordinate between -1 and 1
#' @param y_coor y coordinate between -1 and 1
#'
#' @author Andrew H Farkas, \email{andrewhfarkas at g mail dot com}
#'
#' @export
cart2phi_degrees <- function(x_coor, y_coor) {
browser()
phi_radians <- cart2phi_radians(x_coor, y_coor)
phi_degrees <- rad2deg(phi_radians)
names(phi_degrees) <- "phi_degrees"
phi_degrees
}
#' Takes Cartesian X and Y coordinates and returns phi angle in radians which is 0
#' at the right ear or an X at -1 and Y at 0.
#'
#'
#' @param x_coor x coordinate between -1 and 1
#' @param y_coor y coordinate between -1 and 1
#'
#' @author Andrew H Farkas, \email{andrewhfarkas at g mail dot com}
#'
#' @export
cart2phi_radians <- function(x_coor, y_coor) {
phi_radians <- atan2(y_coor, -x_coor)
negative_phi <- phi_radians < 0
phi_radians[negative_phi] <- abs((2*pi) + phi_radians[negative_phi])
names(phi_radians) <- "phi_radians"
phi_radians
}
#'
#' Takes Cartesian Z coordinate and returns theta angle in degrees which is 0
#' at Cz which is a Z coordinate of 1
#'
#'
#' @param z_coor z coordinate between -1 and 1
#'
#' @author Andrew H Farkas, \email{andrewhfarkas at g mail dot com}
#'
#' @export
cart2theta_degrees <- function(z_coor){
browser()
theta_radians <- cart2theta_radians(z_coor)
theta_degrees <- rad2deg(theta_radians)
names(theta_degrees) <- "theta_degrees"
theta_degrees
}
#'
#' Takes Cartesian Z coordinate and returns theta angle in radians which is 0
#' at Cz which is a Z coordinate of 1
#'
#'
#' @param z_coor z coordinate between -1 and 1
#'
#' @author Andrew H Farkas, \email{andrewhfarkas at g mail dot com}
#'
#' @export
cart2theta_radians <- function(z_coor) {
if ((-1 > z_coor || z_coor > 1)) {
stop("z_coor needs to be between -1 to 1")
}
theta_radians <- acos(z_coor)
names(theta_radians) <- "theta_radians"
theta_radians
}
#' Turns degrees into radians
#'
#' Simple function that turns degrees to radians.
#'
#' @param degrees the degrees number to be turned to degrees
#'
#' @author Andrew H Farkas, \email{andrewhfarkas at g mail dot com}
#'
#' @export
deg2rad <- function(degrees) {(degrees * pi) / (180)}
#' Turns radians into degrees
#'
#' Simple function that turns radians to degrees.
#'
#' @param radians the radians number to be turned to degrees
#'
#' @author Andrew H Farkas, \email{andrewhfarkas at g mail dot com}
#'
#' @export
rad2deg <- function(radians) {(radians * 180) / (pi)}
test_matrix <- matrix(nrow = 0, ncol = 5)
for (index in 1:nrow(oostenveld_channels)) {
current_x <- oostenveld_channels$X[index]
current_y <- oostenveld_channels$Y[index]
current_z <- oostenveld_channels$Z[index]
current_channel <- cart2polar(current_x,
current_y,
current_z)
current_channel <- c(oostenveld_channels$channel[index],
current_channel)
test_matrix <- rbind(test_matrix, t(current_channel))
}
devtools::document()
devtools::document()
devtools::install_github("AndrewHFarkas/EMEGShelper")
library(tidyverse)
library(plotly)
library(EMEGShelper)
## load data
oostenveld_link <- 'https://robertoostenveld.nl/electrodes/plotting_1005.txt'
oostenveld_channels <- read_table(file = oostenveld_link,
col_names = F) %>%
suppressWarnings()
oostenveld_channels <- oostenveld_channels[,1:4]
names(oostenveld_channels) <- c("channel",
"Y",
"X",
"Z")
oostenveld_channels <- tibble(oostenveld_channels)
test_matrix <- matrix(nrow = 0, ncol = 5)
for (index in 1:nrow(oostenveld_channels)) {
current_x <- oostenveld_channels$X[index]
current_y <- oostenveld_channels$Y[index]
current_z <- oostenveld_channels$Z[index]
current_channel <- cart2polar(current_x,
current_y,
current_z)
current_channel <- c(oostenveld_channels$channel[index],
current_channel)
test_matrix <- rbind(test_matrix, t(current_channel))
}
test_matrix <- data.frame(test_matrix)
View(test_matrix)
load("data/biosemi64_channel_numbers_names.RData")
biosemi_64_coors <- read.csv("/home/andrewf/Documents/misc/work/cart_coordinates_biosemi_calc_64_temp.csv")
biosemi_64_coors$X <- - biosemi_64_coors$X
biosemi64_channel_numbers_names[biosemi64_channel_numbers_names$channel_name == "PO5",2:3] <- "PO7"
hold <- tibble(biosemi_64_coors$channel, biosemi64_channel_numbers_names$channel_name_uppercase[1:64])
biosemi64_channel_numbers_names_2 <- biosemi64_channel_numbers_names %>%
slice(1:64) %>%
mutate("original_X"     = biosemi_64_coors$X,
"original_Y"     = biosemi_64_coors$Y,
"original_Z"     = biosemi_64_coors$Z,
"original_theta" = biosemi_64_coors$theta,
"original_phi"   = biosemi_64_coors$phi,
"orig_theta_deg" = rad2deg(original_theta),
"orig_phi_deg"   = rad2deg(original_phi),
"calc_X"         = -(sin(original_theta) * cos(original_phi)),
"calc_Y"         = sin(original_theta) * sin(original_phi),
"calc_Z"         = cos(original_theta))
original_plot <- plot_ly() %>%
add_trace(data = biosemi64_channel_numbers_names_2,
type = "scatter3d",
x = ~-original_X,# minus because I can't flip xaxis on plot
y = ~original_Y,
z = ~original_Z,
text = ~channel_name,
marker = list(color = "black",
opacity = 1,
size = 2))
calc_plot <- plot_ly() %>%
add_trace(data = biosemi64_channel_numbers_names_2,
type = "scatter3d",
x = ~-calc_X,# minus because I can't flip xaxis on plot
y = ~calc_Y,
z = ~calc_Z,
text = ~channel_name,
marker = list(color = "black",
opacity = 1,
size = 2))
original_plot
calc_plot
oostenveld_channels$channel
oostenveld_channels$channel_uppercase <- oostenveld_channels$channel %>% toupper()
oostenveld_channels$channel_uppercase
View(oostenveld_channels)
channel_names64 <- biosemi64_channel_numbers_names_2$channel_name_uppercase
channel_names64
oostenveld_channels %>%
filter(channel_uppercase %in% channel_names64)
oostenveld_filter_64 <- oostenveld_channels %>%
filter(channel_uppercase %in% channel_names64)
oosten64_plot <- plot_ly() %>%
add_trace(data = oostenveld_filter_64,
type = "scatter3d",
x = ~-X,# minus because I can't flip xaxis on plot
y = ~Y,
z = ~Z,
text = ~channel_name,
marker = list(color = "black",
opacity = 1,
size = 2))
oosten64_plot
oosten64_plot <- plot_ly() %>%
add_trace(data = oostenveld_filter_64,
type = "scatter3d",
x = ~-X,# minus because I can't flip xaxis on plot
y = ~Y,
z = ~Z,
text = ~channel,
marker = list(color = "black",
opacity = 1,
size = 2))
oosten64_plot
channels_128 <- read.csv("/home/andrewf/Documents/misc/work/channel_names_128.csv")
View(channels_128)
channels_128 <- read.csv("/home/andrewf/Documents/misc/work/channel_names_128.csv",
header = F)
View(channels_128)
names(channels_128) <- c("actiview",
"wired",
"channel_name")
channels_128
channels_128$channel_name <- channels_128$channel_name %>% toupper()
channels_128 <- read.csv("/home/andrewf/Documents/misc/work/channel_names_128.csv",
header = F)
names(channels_128) <- c("actiview",
"wired",
"channel_name")
channels_128$channel_name_uppercase <- channels_128$channel_name %>% toupper()
channels_128
channel_names128 <- channels_128$channel_name_uppercase
oostenveld_filter_128 <- oostenveld_channels %>%
filter(channel_uppercase %in% channel_names128)
channel_names128 %in% oostenveld_channels$channel_uppercase
!(channel_names128 %in% oostenveld_channels$channel_uppercase)
not_found_oostenv <- !(channel_names128 %in% oostenveld_channels$channel_uppercase)
channel_names128[not_found_oostenv]
View(oostenveld_filter_128)
View(oostenveld_channels)
not_found_oostenv <- !(oostenveld_channels$channel_uppercase %in% channel_names128)
channel_names128[not_found_oostenv]
not_found_oostenv
summary(not_found_oostenv)
not_found_oostenv <- !(oostenveld_channels$channel_uppercase %in% channel_names128)
not_found_128 <- !(channel_names128 %in% oostenveld_channels$channel_uppercase)
channel_names128[not_found_128]
oostenveld_channels$channel_uppercase
oostenveld_channels$channel_uppercase[not_found_oostenv]
oostenveld_channels$channel_uppercase[!not_found_oostenv]
hold <- tibble(oostenveld_channels$channel_uppercase[!not_found_oostenv],
channel_names128)
oostenveld_channels$channel_uppercase[!not_found_oostenv]
oostenveld_channels$channel_uppercase[!not_found_oostenv]
channel_names128[not_found_128]
hold <- tibble(oostenveld_channels$channel_uppercase[!not_found_oostenv],
channel_names128)
oostenveld_128 <- oostenveld_channels$channel_uppercase[!not_found_oostenv]
hold <- tibble(oostenveld_channels$channel_uppercase[!not_found_oostenv],
channel_names128)
oostenveld_128 <- c(oostenveld_128, "placeholder")
oostenveld_128 <- c(oostenveld_128, "placeholder")
hold <- tibble(oostenveld_channels$channel_uppercase[!not_found_oostenv],
channel_names128)
hold <- tibble(oostenveld_128,
channel_names128)
oostenveld_128 <- c(oostenveld_128, "placeholder")
hold <- tibble(oostenveld_128,
channel_names128)
View(hold)
sort(oostenveld_128)
oostenveld_128 <- sort(oostenveld_128)
hold <- tibble(oostenveld_128,
sort(channel_names128))
View(hold)
oostenveld_128 <- oostenveld_channels$channel_uppercase[!not_found_oostenv]
oostenveld_128 <- c(oostenveld_128, "zplaceholder")
oostenveld_128 <- c(oostenveld_128, "zplaceholder")
oostenveld_128 <- c(oostenveld_128, "zplaceholder")
oostenveld_128 <- sort(oostenveld_128)
hold <- tibble(oostenveld_128,
sort(channel_names128))
View(hold)
